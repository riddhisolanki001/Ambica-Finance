[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Payment Entry",
  "enabled": 0,
  "modified": "2024-01-31 12:38:10.404966",
  "module": "Ambica Finance",
  "name": "PE test",
  "script": "frappe.ui.form.on('Payment Entry', {\r    refresh(frm) {\r        if (frm.doc.__islocal) {\r            frappe.msgprint(__('This is a new form.'));\r        } else {\r            // console.log(frm.doc.references.length);\r            frm.doc.references.forEach(async function(item) {\r                item.reference_name=\"ACC-PINV-2024-00018\"\r                console.log(item.reference_name)\r                a=reference_name1(frm,cdt,cdn)\r                // frm.trigger(\"references\",\"reference_name\")\r            });\r            frm.refresh_field(\"references\");\r        }\r    }\r});\r\rfrappe.ui.form.on('Payment Entry Reference', {\r    reference_name1(frm, cdt, cdn) {\r        console.log(\"Hello\");\r    }\r});\r\r\r// frappe.ui.form.on('Payment Entry', {\r//      refresh:function(frm) {\r//         triggerChildTableAction(frm);\r//     }\r// });\r\r// function triggerChildTableAction(frm) {\r//     // Replace 'references' with the actual name of your child table\r//     var childTable = frm.fields_dict['references'].grid;\r//     console.log(childTable)\r\r//     // Loop through each row in the child table\r//     childTable.get_field('reference_name').grid.grid_rows.forEach(function (row) {\r//         var referenceName = row.get_field('reference_name').get_value();\r//         console.log('Action triggered for reference_name: ' + referenceName);\r//         console.log(\"childtablefield trigger\");\r//     });\r// }\r\r",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2024-01-04 15:19:06.932651",
  "module": "Ambica Finance",
  "name": "Purchase order hold",
  "script": "frappe.ui.form.on('Purchase Order', {\n    onload: function(frm) {\n        // Fetch the supplier_name and hold_type based on the selected supplier\n        if (frm.doc.supplier && frm.doc.supplier != null) {\n            frappe.call({\n                method: 'frappe.client.get_value',\n                args: {\n                    doctype: 'Supplier',\n                    filters: { name: frm.doc.supplier },\n                    fieldname: ['name', 'supplier_name', 'hold_type']\n                },\n                callback: function(response) {\n                    if (response.message) {\n                        var holdType = response.message.hold_type;\n\n                        // Check if the Purchase Order should be put on hold\n                        if (holdType === 'Purchase Order') {\n                            // Show a message indicating that the form cannot be submitted\n                            frappe.msgprint({\n                                message: __('Cannot create Purchase Order for this supplier.'),\n                                indicator: 'red'\n                            });\n                            frappe.set_route(\"Form\", \"Supplier\", frm.doc.supplier);\n                            // Prevent the form from being submitted\n                            frappe.validated = false;\n                        }\n                    }\n                }\n            });\n        }\n    }\n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Account",
  "enabled": 1,
  "modified": "2024-01-04 15:19:06.914596",
  "module": "Ambica Finance",
  "name": "Account head in set GST Account",
  "script": "frappe.ui.form.on('Account', {\n    onload: function(frm) {\n        if (frm.doc.custom_is_non_credit_gst === 1) {\n            console.log('Hello');\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Tax Withholding Category",
  "enabled": 0,
  "modified": "2024-02-05 13:18:58.668229",
  "module": "Ambica Finance",
  "name": "Tax Withholding Category Name",
  "script": "frappe.ui.form.on('Tax Withholding Category', {\n    refresh: function(frm) {\n        // Your script logic here\n    },\n    onload: function(frm) {\n        // Check if the document is in Draft state (new form)\n        if (frm.doc.docstatus === 0) {\n            // Set a default value for the __newname field during onload for new forms\n            frm.set_value('__newname', frm.doc.custom_type + '-' + frm.doc.custom_sub_category);\n        }\n    },\n    custom_section: function(frm) {\n        if (frm.doc.category_name) {\n            // Update the __newname field when custom_section changes and category_name is not null\n            frm.set_value('__newname', frm.doc.custom_type + '-' + frm.doc.custom_section + '-' + frm.doc.category_name + '-' + frm.doc.custom_sub_category);\n        } else {\n            // Handle the case when category_name is null\n            // You can run another query or set a different value as needed\n            frm.set_value('__newname', frm.doc.custom_type + '-' + frm.doc.custom_section + '-' + frm.doc.custom_sub_category);\n        }\n        \n    },\n    custom_sub_category: function(frm) {\n        // Set a default value for the __newname field by concatenating custom_type and custom_section\n        frm.set_value('__newname', frm.doc.custom_type + '-' + frm.doc.custom_section + '-' + frm.doc.category_name + '-' + frm.doc.custom_sub_category);\n    },\n    custom_type: function(frm) {\n        // Set a default value for the __newname field by concatenating custom_type and custom_section\n        frm.set_value('__newname', frm.doc.custom_type + '-' + frm.doc.custom_section + '-' + frm.doc.category_name + '-' + frm.doc.custom_sub_category);\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Invoice",
  "enabled": 1,
  "modified": "2024-02-09 16:39:07.074274",
  "module": "Ambica Finance",
  "name": "Attachments Mandatory",
  "script": "frappe.ui.form.on('Purchase Invoice', {\n    before_submit: function(frm) {\n        // Flag to check if the message has been shown\n        var attachmentMessageShown = false;\n\n        // Access the expense_account and custom_attachments field value for each item\n        frm.doc.items.forEach(async function(item) {\n            var expenseAccount = item.expense_account;\n\n            // Fetch the account document\n            var accountDoc = await frappe.db.get_doc(\"Account\", expenseAccount);\n\n            if (accountDoc) {\n                // Access the custom_attachments field value\n                var customAttachment = accountDoc.custom_attachments;\n\n                // Check the value of custom_attachments\n                if (customAttachment === 'Yes') {\n\n                    // Check if attachments are present\n                    if (!frm.attachments.get_attachments().length) {\n                        // Show the message only if it hasn't been shown before\n                        if (!attachmentMessageShown) {\n                            frappe.msgprint({\n                                title: __('Attachments Required'),\n                                indicator: 'red',\n                                message: __('Please attach at least one document before saving.'),\n                            });\n\n                            // Stop saving the form\n                            frappe.validated = false;\n\n                            // Set the flag to true\n                            attachmentMessageShown = true;\n                        }\n                    }\n                } else {\n                    console.log(\"Select Attachment: No\");\n                }\n            }\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Payment Reconciliation",
  "enabled": 1,
  "modified": "2024-01-04 15:19:06.780489",
  "module": "Ambica Finance",
  "name": "force closing even outstanding in PR",
  "script": "frappe.ui.form.on('Payment Reconciliation', {\n\trefresh(frm){\n   \n    \n         var company = frm.doc.company\n\t     frappe.db.get_value('Company', company, 'abbr', function(data) {\n         var abr = data.abbr;\n         console.log('Company:', company);\n         console.log(abr);\n\n    // Rest of your code here...\n\n\t     console.log(company)\n\t     console.log(abr)\n\t    \n\t    console.log('Payment Reconciliation document:', frm.doc);\n\t    \n\t   \n\t    var party_account = frm.doc.receivable_payable_account\n\t    var party_type = frm.doc.party_type\n\t    var party = frm.doc.party\n\t    var posting_date = '';\n\t    \n\t   \n\t    var invoice_total =0\n\t    var payment_total=0\n\n\t    if (frm.doc.invoices && frm.doc.invoices.length > 0) {\n\t        $.each(frm.doc.invoices, function(i, d) {\n\t            var amt = d.amount;\n\t            invoice_total += amt\n\t            \n\t           // console.log(amt);\n\t        });\n\t        console.log(invoice_total)\n\t        \n\t        if (frm.doc.payments && frm.doc.payments.length > 0) {\n\t         $.each(frm.doc.payments, function(i, d) {\n\t            var amount = d.amount;\n\t                posting_date = d.posting_date\n\t            payment_total += amount\n\t           // console.log(amount);\n\t        });\n\t        console.log(payment_total)\n\t        if(payment_total < invoice_total){\n\t        var difference = parseInt(invoice_total) - parseInt(payment_total)\n\t        console.log(difference)\n\t        if(difference > 0){\n\t          \n\t           \n\t            frappe.confirm('Do you want to make Difference Entry',\n                () => {\n                    console.log(\"yes selected\")\n                    var newJvEntry = frappe.model.get_new_doc('Journal Entry');\n                            \t\tnewJvEntry.voucher_type = \"Journal Entry\";\n                            \t\tnewJvEntry.company = company;\n                            \t\tnewJvEntry.docstatus = 0;\n                            \t\tnewJvEntry.posting_date = posting_date;\n                            \t\n                            \t\tnewJvEntry.accounts = [];\n                 \n                            \t\t\t// console.log(description_of_goods, source_warehouse)\n                            \t\t\tnewJvEntry.accounts.push({\n                            \t\t\t\t\"account\": party_account,\n                            \t\t\t\t\"debit_in_account_currency\": difference,\n                            \t\t\t\t\"party_type\":party_type,\n                            \t\t\t\t\"party\":party\n                            \t\t\t\t\n                            \t\t\t\n                            \t\t\t});\n                            \t\t\t\tnewJvEntry.accounts.push({\n                            \t\t\t\t\"account\": 'Write Off'+\" - \"+abr,\n                            \t\t\t\t\"credit_in_account_currency\": difference,\n                            \t\t\t\t\n                            \t\t\t\t\n                            \t\t\t\n                            \t\t\t});console.log(\"New Journal Entry:\", newJvEntry);\n\n                                         // Save the Journal Entry\n                                        frappe.call({\n                                            method: 'frappe.client.save',\n                                            args: {\n                                                doc: newJvEntry\n                                            },\n                                            callback: function (r) {\n                                                if (r.message) {\n                                                    console.log(\"Journal Entry saved successfully:\", r.message);\n                                                } else {\n                                                    console.error(\"Error saving Journal Entry:\", r.exc);\n                                                }\n                                        }\n                                });\n                    }, () => {\n                            console.log(\"No selected\")\n                    \n        // action to perform if No is selected\n                })\n\t            \n\t            \n\t        }\n\t   }\n\t        \n\t        \n\t        \n\t    } \n\t    }\n\t     });\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Journal Entry",
  "enabled": 1,
  "modified": "2024-01-04 15:19:06.837667",
  "module": "Ambica Finance",
  "name": "Prepaid Expence Auto entry",
  "script": "frappe.ui.form.on('Journal Entry', {\n\trefresh:function(frm) {\n\t    \n\t    var today = frappe.datetime.nowdate();\n\t    \n        frm.add_custom_button(__('Prepaid Entry'), function() {\n            let d = new frappe.ui.Dialog({\n                    title: 'Enter details',\n                    fields: [\n                        {\n                            label: 'Amount',\n                            fieldname: 'amount',\n                            fieldtype: 'Currency'\n                        },\n                        {\n                            label: 'From Date',\n                            fieldname: 'from_date',\n                            fieldtype: 'Date'\n                        },\n                        {\n                            label: 'To Date',\n                            fieldname: 'to_date',\n                            fieldtype: 'Date'\n                        },\n                         {\n                            label: 'Credit Account',\n                            fieldname: 'credit_account',\n                            fieldtype: 'Link',\n                            options:'Account'\n                        },\n                        \n                        {\n                            label: 'User Remarks',\n                            fieldname: 'user_remark',\n                            fieldtype: 'Small Text',\n                            \n                        }\n                    ],\n                    size: 'small', // small, large, extra-large \n                    primary_action_label: 'Submit',\n                    primary_action(values) {\n                        console.log(values);\n                        var from_date = values.from_date\n                        var to_date = values.to_date\n                        var debit_account = values.debit_account\n                        var credit_account = values.credit_account\n                        var amount = values.amount\n                        var user_remarks = values.user_remark;\n                        console.log(user_remarks)\n                        \n                       \n                        \n                            \n                            \n                            var newJvEntry = frappe.model.get_new_doc('Journal Entry');\n                            \t\tnewJvEntry.voucher_type = \"Journal Entry\";\n                            // \t\tnewJvEntry.company = company;\n                            \t\tnewJvEntry.docstatus = 0;\n                            \t\tnewJvEntry.posting_date = today;\n                            \t\tnewJvEntry.from_date = from_date;\n                            \t\tnewJvEntry.to_date = to_date;\n                            \t\tnewJvEntry.user_remark = user_remarks\n                            \t\t\n                            \t\t\n                            \t\t\n                            \t\n                            \t\tnewJvEntry.accounts = [];\n                 \n                            \t\t\t// console.log(description_of_goods, source_warehouse)\n                            \t\t\tnewJvEntry.accounts.push({\n                            \t\t\t\t\"account\":'Prepaid Expense - SD',\n                            \t\t\t\t\"debit_in_account_currency\": amount,\n                            \t\t\t\t\n                            \t\t\t\n                            \t\t\t});\n                            \t\t\t\tnewJvEntry.accounts.push({\n                            \t\t\t\t\"account\": credit_account,\n                            \t\t\t\t\"credit_in_account_currency\": amount,\n                            \t\t\t\t\n                            \t\t\t\t\n                            \t\t\t\n                            \t\t\t});console.log(\"New Journal Entry:\", newJvEntry);\n\n                                         // Save the Journal Entry\n                                        frappe.call({\n                                            method: 'frappe.client.save',\n                                            args: {\n                                                doc: newJvEntry\n                                            },\n                                            callback: function (r) {\n                                                if (r.message) {\n                                                    console.log(\"Journal Entry saved successfully:\", r.message);\n                                                } else {\n                                                    console.error(\"Error saving Journal Entry:\", r.exc);\n                                                }\n                                        }\n                                });\n                        \n                        \n                        \n                        d.hide();\n                    }\n                });\n                \n                d.show();\n\n\t         \n\t     })\n//               let d = new frappe.ui.Dialog({\n//     title: 'Enter details',\n//     fields: [\n//         {\n//             label: 'First Name',\n//             fieldname: 'first_name',\n//             fieldtype: 'Data'\n//         },\n//         {\n//             label: 'Last Name',\n//             fieldname: 'last_name',\n//             fieldtype: 'Data'\n//         },\n//         {\n//             label: 'Age',\n//             fieldname: 'age',\n//             fieldtype: 'Int'\n//         }\n//     ],\n//     size: 'small', // small, large, extra-large \n//     primary_action_label: 'Submit',\n//     primary_action(values) {\n//         console.log(values);\n//         d.hide();\n//     }\n// });\n\n// d.show();\n\n    \n\n\t \n            \n\t    \n\t\t// your code here\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 0,
  "modified": "2024-01-04 15:19:06.691753",
  "module": "Ambica Finance",
  "name": "TCS Logics",
  "script": "frappe.ui.form.on('Customer', {\n\trefresh:function(frm) {\n\t    var answer = frm.doc.custom_turn_over_more_then_10cr\n\t    var declaration = frm.doc.custom_tds_declaration\n\t    var files = cur_frm.get_docinfo().attachments\n        var length = files.length\n\t    console.log(declaration)\n\t    console.log(\".................\")\n\t    console.log(answer)\n\t    if (cur_frm.fields_dict['tax_withholding_category']) {\n\t    if (answer ===  'Yes' && length === 0){\n\t        \n\t       frm.set_value('tax_withholding_category','TCS @ 0.1%')\n\t       frm.refresh_field('tax_withholding_category')\n\t    }\n\t    \n\t    else if(answer === 'Yes' && length > 0){\n\t        frm.set_value('tax_withholding_category','')\n\t         frm.refresh_field('tax_withholding_category')\n\t        \n\t    }\n\t    \n\t   else  if(answer === 'No'){\n\t        frm.set_value('tax_withholding_category','')\n\t         frm.refresh_field('tax_withholding_category')\n\t        \n\t    }\n\t    }\n\t    \n\t\t// your code here\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Invoice",
  "enabled": 1,
  "modified": "2024-02-09 16:38:58.766791",
  "module": "Ambica Finance",
  "name": "Payment Terms Due Date Chane in Pi",
  "script": "frappe.ui.form.on('Purchase Invoice', {\n\tsupplier(frm) {\n\t    var supplier = frm.doc.supplier\n\t    frappe.db.get_list('Supplier',{\n\t        fields:['payment_terms'],\n\t        filters:{\n\t            name:supplier\n\t        }\n\t       \n\t    }).then(rec => {\n\t        for (var d in rec){\n\t            var payment_term_template = rec[d].payment_terms\n\t        }\n\t        console.log(payment_term_template)\n\t        frappe.call({\n                    method: 'frappe.client.get',\n                    args: {\n                        doctype: 'Payment Terms Template', // Replace with your actual parent doctype name\n                        filters: {\n                            name: payment_term_template\n                        }\n                    },\n                    callback: function (response) {\n                        var parentRecord = response.message;\n                        console.log(parentRecord)\n\n                        // Access child table data from the parent record\n                        var childTableData = parentRecord.terms // Replace with your actual child table fieldname\n                        var due_date_based_on = childTableData[0].due_date_based_on\n                        var custom_supplier_invoice = childTableData[0].custom_supplier_invoice\n                        var supplier_invoice = frm.doc.bill_date\n                        console.log(childTableData);\n                        console.log(due_date_based_on);\n                        console.log(custom_supplier_invoice)\n                        \n                        if (due_date_based_on == 'Day(s) after invoice date'){\n                            console.log(\"yes condition checked\")\n                            \n                            if(custom_supplier_invoice == 0){\n                                console.log(\"checkebox unchecked\")\n                            \n                                frm.set_df_property('custom_supplier_invoice_date', 'hidden', 0)\n                                frm.set_df_property('bill_date', 'hidden', 1)\n                                \n                            }\n                            else if(custom_supplier_invoice == 1){\n                                console.log(\"checkebox checked\")\n                                frm.set_df_property('custom_supplier_invoice_date', 'hidden', 1)\n                                frm.set_df_property('bill_date', 'hidden', 0)\n                            }\n                        }\n\n                        // Handle child table data here\n                        \n                    }\n                });\n\t       \n\t        \n\t        \n\t    })\n\t\t// your code here\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Payment Entry",
  "enabled": 0,
  "modified": "2024-01-31 12:38:10.559050",
  "module": "Ambica Finance",
  "name": "Dialog Box",
  "script": "frappe.ui.form.on('Payment Entry', {\n    onload: function(frm) {\n        frm.add_custom_button(__('Purchase Order'), function() {\n            var d = new frappe.ui.form.MultiSelectDialog({\n                doctype: \"Purchase Order\",\n                target: frm,\n                setters: {\n                    supplier_name: null,\n                    schedule_date: null\n                },\n                action(selections, args) {\n                    // Extract the selected Purchase Order names\n                    var selectedPurchaseOrders = selections.map(item => `${item.name} (Supplier: ${item.supplier_name})`);\n                    console.log(selectedPurchaseOrders);\n                    frappe.msgprint(\"Selected Purchase Orders: \" + selectedPurchaseOrders.join(', '));\n                    // Make an HTTP request to the server script\n                    frappe.call({\n                        method: 'API',\n                        args: {\n                            selected_purchase_orders: selections\n                        },\n                        callback: function(response) {\n                            if (!response.exc) {\n                                // Successfully received a response from the server\n                                frappe.msgprint(response.message);\n                            }\n                        }\n                    });\n                }\n            });\n            d.show();\n        }, __(\"Get Items From\"));\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Payment Entry",
  "enabled": 0,
  "modified": "2024-01-31 12:38:10.582293",
  "module": "Ambica Finance",
  "name": "Pay Receipt",
  "script": "frappe.ui.form.on('Payment Entry', {\n\tonload:function(frm) {\n\t    if(frm.is_new()){\n\t        frappe.msgprint({\n    title: __('Notification'),\n    indicator: 'green',\n    message: __('Please Select Payment type First')\n});\n\t    }\n\t\t// your code here\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Supplier",
  "enabled": 1,
  "modified": "2024-01-29 15:11:21.008435",
  "module": "Ambica Finance",
  "name": "Pan Number",
  "script": "frappe.ui.form.on('Supplier', {\n    before_save:function(frm) {\n        // Access the value of the \"pan\" field\n        var panValue = frm.doc.pan;\n\n        // Check if the pan number has at least 4 characters and the fourth character is 'p'\n        if (panValue && panValue.length >= 4 && panValue[3].toLowerCase() === 'p') {\n            // Set the value of the \"custom_sub_category_\" field to \"Propritorship\"\n            frappe.model.set_value(frm.doctype, frm.docname, 'custom_sub_category_', 'Propritorship');\n            \n            // Set the value of the \"custom_company_status\" field to \"2\"\n            frappe.model.set_value(frm.doctype, frm.docname, 'custom_company_status', '2');\n        } else {\n            // If the condition is not met, set the value to \"Other\" for \"custom_sub_category_\"\n            frappe.model.set_value(frm.doctype, frm.docname, 'custom_sub_category_', 'Other');\n            \n            // Set the value of the \"custom_company_status\" field to a default value (e.g., \"1\")\n            frappe.model.set_value(frm.doctype, frm.docname, 'custom_company_status', '1');\n        }\n\n        \n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Auto Outstanding",
  "enabled": 1,
  "modified": "2024-01-04 15:19:06.897688",
  "module": "Ambica Finance",
  "name": "Auto Outstanding",
  "script": "frappe.ui.form.on('Auto Outstanding', {\n    refresh: function(frm) {\n        set_css(frm)\n    },\n    get_invoices: function(frm) {\n        // Check if both fields are not null before making a server call\n        if (frm.doc.party_name && frm.doc.due_date) {\n            console.log(\"Party Name changed to:\", frm.doc.party_name);\n            console.log(\"Due Date changed to:\", frm.doc.due_date);\n\n            // Clear existing child table entries\n            frm.clear_table('outstandings');\n\n            // Make a server call to get all Purchase Invoice names for the party_name and due_date\n            frappe.call({\n                method: 'frappe.client.get_list',\n                args: {\n                    doctype: 'Purchase Invoice',\n                    filters: {\n                        'supplier': frm.doc.party_name,\n                        'due_date': ['<=', frm.doc.due_date],\n                        'status': 'Unpaid'\n                    },\n                    fields: ['name', 'supplier', 'due_date', 'posting_date','total','remarks','bill_no','bill_date'],\n                    limit: 0  // Set limit to 0 to get all records\n                },\n                callback: function(response) {\n                    // Log the Purchase Invoice details to the console\n                    console.log(\"Purchase Invoice Names:\", response.message.map(row => row.name));\n                    console.log(\"Due Dates:\", response.message.map(row => row.due_date));\n                    frm.clear_table('outstandings');\n                    // Add new entries to the child table\n                    response.message.forEach(function(row) {\n                        var child = frm.add_child('outstandings');\n                        frappe.model.set_value(child.doctype, child.name, 'party_name', row.supplier);\n                        frappe.model.set_value(child.doctype, child.name, 'due_date', row.due_date);\n                        frappe.model.set_value(child.doctype, child.name, 'invoice_number', row.name);\n                        frappe.model.set_value(child.doctype, child.name, 'invoice_date', row.posting_date);\n                        frappe.model.set_value(child.doctype, child.name, 'amount', row.total);\n                        frappe.model.set_value(child.doctype, child.name, 'remarks', row.remarks);\n                        frappe.model.set_value(child.doctype, child.name, 'party_bill_number', row.bill_no);\n                        frappe.model.set_value(child.doctype, child.name, 'party_bill_date', row.bill_date);\n                    });\n\n                    // Refresh the child table\n                    frm.refresh_field('outstandings');\n                }\n            });\n        }\n    },\n    not_due: function(frm) {\n        // Check if both fields are not null before making a server call\n        if (frm.doc.party_name && frm.doc.due_date) {\n            console.log(\"Party Name changed to:\", frm.doc.party_name);\n            console.log(\"Due Date changed to:\", frm.doc.due_date);\n\n            // Clear existing child table entries\n            frm.clear_table('outstandings');\n\n            // Make a server call to get all Purchase Invoice names for the party_name and due_date\n            frappe.call({\n                method: 'frappe.client.get_list',\n                args: {\n                    doctype: 'Purchase Invoice',\n                    filters: {\n                        'supplier': frm.doc.party_name,\n                        'status': 'Unpaid'\n                    },\n                    fields: ['name', 'supplier', 'due_date', 'posting_date','total','remarks','bill_no','bill_date'],\n                    limit: 0  // Set limit to 0 to get all records\n                },\n                callback: function(response) {\n                    // Log the Purchase Invoice details to the console\n                    console.log(\"Purchase Invoice Names:\", response.message.map(row => row.name));\n                    console.log(\"Due Dates:\", response.message.map(row => row.due_date));\n                    frm.clear_table('outstandings');\n                    // Add new entries to the child table\n                    response.message.forEach(function(row) {\n                        var child = frm.add_child('outstandings');\n                        frappe.model.set_value(child.doctype, child.name, 'party_name', row.supplier);\n                        frappe.model.set_value(child.doctype, child.name, 'due_date', row.due_date);\n                        frappe.model.set_value(child.doctype, child.name, 'invoice_number', row.name);\n                        frappe.model.set_value(child.doctype, child.name, 'invoice_date', row.posting_date);\n                        frappe.model.set_value(child.doctype, child.name, 'amount', row.total);\n                        frappe.model.set_value(child.doctype, child.name, 'remarks', row.remarks);\n                        frappe.model.set_value(child.doctype, child.name, 'party_bill_number', row.bill_no);\n                        frappe.model.set_value(child.doctype, child.name, 'party_bill_date', row.bill_date);\n                    });\n\n                    // Refresh the child table\n                    frm.refresh_field('outstandings');\n                }\n            });\n        }\n    }\n});\n\n\nfrappe.ui.form.on('Outstanding Child', {\n\toutstandings_add:function(frm) {\n\t     frm.add_custom_button(__('Payment'), function() {\n\t         \n\t     }).css({\"color\":\"blue\"});\n\t     \n\t     frm.add_custom_button(__('Export Unadjusted'), function() {\n\t         \n\t     })\n\t\t// your code here\n\t}\n})\n\nfunction set_css(frm){\n    console.log(\"hello\");\n\tdocument.querySelectorAll(\"[data-fieldname = 'get_invoices']\")[1].style.backgroundColor = 'black';\n    document.querySelectorAll(\"[data-fieldname = 'get_invoices']\")[1].style.marginTop = '5px    ';\n\tdocument.querySelectorAll(\"[data-fieldname = 'get_invoices']\")[1].style.color = 'white';\n\t\n\t\n\tdocument.querySelectorAll(\"[data-fieldname = 'not_due']\")[1].style.backgroundColor = 'black';\n    document.querySelectorAll(\"[data-fieldname = 'not_due']\")[1].style.marginTop = '5px    ';\n\tdocument.querySelectorAll(\"[data-fieldname = 'not_due']\")[1].style.color = 'white';\n\n\t\n\t\n}\n\n\n\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Bill Purchase",
  "enabled": 0,
  "modified": "2024-02-01 16:55:20.448162",
  "module": "Ambica Finance",
  "name": "Bill Purchase",
  "script": "// frappe.ui.form.on('Bill Purchase', {\n// \trefresh(frm) {\n// \t    frm.add_custom_button(__('Export Invoice'), function() { })\n// \t\t// your code here\n// \t}\n// })\n\n\n\n\nfrappe.ui.form.on('Bill Purchase', {\n    refresh(frm) {\n        // Add a custom button for exporting Sales Invoice List\n        frm.add_custom_button(__('Export Invoice'), function() {\n            // Fetch all Sales Invoices\n            \n        });\n\n        // Your existing code...\n    }\n});\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Bill Purchase",
  "enabled": 1,
  "modified": "2024-01-04 15:19:06.994083",
  "module": "Ambica Finance",
  "name": "Crystalization",
  "script": "frappe.listview_settings['Bill Purchase'] = {\r\n    \r\n        \r\n      onload:function(listview) {\r\n          console.log('Custom script executed');\r\n\t        listview.page.add_action_item('Crystalization', () => my_action());\r\n      \r\n\t\t}\r\n\t\t\r\n\t\r\n\r\n    \r\n};\r\n\r\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Payment Entry",
  "enabled": 0,
  "modified": "2024-01-31 12:38:10.512262",
  "module": "Ambica Finance",
  "name": "Pay Recipt",
  "script": "frappe.ui.form.on('Payment Entry', {\r\n\tonload:function(frm) {\r\n\t    console.log('script is working')\r\n\tlet d = new frappe.ui.Dialog({\r\n    title: 'Enter details',\r\n    fields: [\r\n        \r\n        {\r\n            label: 'Payment Type',\r\n            fieldname: 'payment_type',\r\n            fieldtype: 'Data'\r\n            \r\n        }\r\n    ],\r\n    size: 'small', // small, large, extra-large \r\n    primary_action_label: 'Submit',\r\n    primary_action(values) {\r\n        console.log(values);\r\n        d.hide();\r\n    }\r\n});\r\n\t    // your code here\r\n\t}\r\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 1,
  "modified": "2024-01-29 15:13:13.478877",
  "module": "Ambica Finance",
  "name": "Customer Tax Category",
  "script": "frappe.ui.form.on('Customer', {\n    before_save:function(frm) {\n        var GstValue = frm.doc.gstin;\n\n        if (GstValue && GstValue.length >= 2 && GstValue.substring(0, 2) === '24') {\n            frappe.model.set_value(frm.doctype, frm.docname, 'tax_category', 'IN-State');\n        } else {\n            frappe.model.set_value(frm.doctype, frm.docname, 'tax_category', 'Out-State');\n        }\n        // frm.save()\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Supplier",
  "enabled": 1,
  "modified": "2024-01-29 15:10:56.717871",
  "module": "Ambica Finance",
  "name": "Tax Category Supplier",
  "script": "\nfrappe.ui.form.on('Supplier', {\n    before_save: function(frm) {\n        var GstValue = frm.doc.gstin;\n\n        if (GstValue && GstValue.length >= 2 && GstValue.substring(0, 2) === '24') {\n            frappe.model.set_value(frm.doctype, frm.docname, 'tax_category', 'IN-State');\n        } else {\n            frappe.model.set_value(frm.doctype, frm.docname, 'tax_category', 'Out-State');\n        }\n        // frm.save()\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Payment Entry",
  "enabled": 0,
  "modified": "2024-02-12 15:36:35.983152",
  "module": "Ambica Finance",
  "name": "Payment entry epc dialogbox",
  "script": "frappe.ui.form.on('Payment Entry', {\n    refresh(frm) {\n        frm.add_custom_button(__('Get Items From EPC'), function() {\n            new frappe.ui.form.MultiSelectDialog({\n                doctype: \"EPC PCFC Entry\",\n                target: frm,\n                setters: {\n                    // schedule_date: null,\n                    // status: null\n                    bank_name: null,\n                    amount:null,\n                    date:null,\n                    due_date:null\n                },\n                size: 'large', \n                add_filters_group: 1,\n                date_field: \"date\",\n                // allow_child_item_selection: 1,\n                // child_fieldname: \"items\", // child table fieldname, whose records will be shown &amp; can be filtered\n                // child_columns: [\"item_code\", \"qty\"], // child item columns to be displayed\n                get_query() {\n                    return {\n                        // filters: { docstatus: ['!=', 2] }\n                    };\n                },\n                action(selections, args) {\n                    // console.log(args.filtered_children); // list of selected item names\n                }\n            });\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Memorandum Invoice",
  "enabled": 1,
  "modified": "2024-01-04 15:19:06.882972",
  "module": "Ambica Finance",
  "name": "Get full address from address name",
  "script": "frappe.ui.form.on(\"Memorandum Invoice\", \"company_address_name\", function(frm, cdt, cdn) {\n    if(frm.doc.company_address_name){\n      return frm.call({\n      method: \"frappe.contacts.doctype.address.address.get_address_display\",\n      args: {\n         \"address_dict\": frm.doc.company_address_name\n      },\n      callback: function(r) {\n        if(r.message)\n            frm.set_value(\"company_address\", r.message);\n        \n      }\n     });\n    }\n    else{\n        frm.set_value(\"company_address\", \"\");\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Payment Entry",
  "enabled": 0,
  "modified": "2024-01-31 12:38:10.485156",
  "module": "Ambica Finance",
  "name": "Set Cheque/Reference No",
  "script": "var isChequeBookOver = false; \n\nfrappe.ui.form.on('Payment Entry', {\n    before_save: function(frm) {\n        if (!frm.doc.reference_no) {\n            // console.log('Reference No is null. Skipping validation.');\n            return;\n        }\n        fetchChequeBookInfoAndValidateReferenceNo(frm);\n        fetchChequeBookInfoAndDuplicateNo(frm);\n    },\n    onload: function(frm) {\n        setReferenceNoBasedOnAccountTypes(frm);\n    },\n    paid_from: function(frm) {\n        setReferenceNoBasedOnAccountTypes(frm);\n    },\n    paid_to: function(frm) {\n        setReferenceNoBasedOnAccountTypes(frm);\n    },\n});\n\n\nfunction setReferenceNoBasedOnAccountTypes(frm) {\n    var paidFromAccount = frm.doc.paid_from;\n    var paidToAccount = frm.doc.paid_to;\n\n    fetchAccountType(paidFromAccount, function(accountTypeFrom) {\n        console.log('Paid From Account Type:', accountTypeFrom);\n\n        fetchAccountType(paidToAccount, function(accountTypeTo) {\n            console.log('Paid To Account Type:', accountTypeTo);\n\n              if (accountTypeFrom === 'Bank' || accountTypeTo === 'Bank') {\n                    if (frm.is_new()) {\n                       fetchChequeBookInfoAndSetReferenceNo(frm);\n                    }\n                } \n                else {\n                    frm.set_value('reference_no', '');\n                }\n        });\n    });\n}\n\nfunction fetchAccountType(account, callback) {\n    frappe.call({\n        method: 'frappe.client.get_value',\n        args: {\n            doctype: 'Account',\n            fieldname: 'account_type',\n            filters: { name: account }\n        },\n        callback: function(response) {\n            var accountType = response.message ? response.message.account_type : '';\n            callback(accountType);\n        }\n    });\n}\n\nfunction fetchChequeBookInfoAndSetReferenceNo(frm) {\n    frappe.call({\n        method: 'frappe.client.get_list',\n        args: {\n            doctype: 'Cheque Book',\n            fields: ['name', 'from_no', 'last_no'],\n            filters: {},\n            order_by: 'creation desc',\n            limit: 1\n        },\n        callback: function(response) {\n            if (response.message && response.message.length > 0) {\n                var chequeBooksList = response.message;\n                var fromNo = chequeBooksList[0].from_no;\n                var lastNo = chequeBooksList[0].last_no;\n\n                frappe.call({\n                    method: 'frappe.client.get_list',\n                    args: {\n                        doctype: 'Payment Entry',\n                        fields: ['name', 'reference_no'],\n                        limit: 0\n                    },\n                    callback: function(paymentEntryResponse) {\n                        console.log('All Payment Entry Reference Nos:');\n                        paymentEntryResponse.message.forEach(function(paymentEntry) {\n                            console.log(paymentEntry.reference_no);\n                        });\n\n                        var lastAssignedReferenceNo = paymentEntryResponse.message && paymentEntryResponse.message.length > 0\n                            ? Math.max.apply(Math, paymentEntryResponse.message.map(function(entry) {\n                                return parseInt(entry.reference_no) || fromNo;\n                            }))\n                            : fromNo;\n\n                        if (lastAssignedReferenceNo >= fromNo && lastAssignedReferenceNo <= lastNo) {\n                            if (!frm.doc.__islocal) {\n                                frm.set_value('reference_no', lastAssignedReferenceNo);\n                            } else {\n                                frappe.call({\n                                    method: 'frappe.client.get_list',\n                                    args: {\n                                        doctype: 'Payment Entry',\n                                        fields: ['name'],\n                                        limit: 1\n                                    },\n                                    callback: function(paymentEntryResponse) {\n                                        if (paymentEntryResponse.message && paymentEntryResponse.message.length > 0) {\n                                            lastAssignedReferenceNo += 1;\n\n                                            if (lastAssignedReferenceNo > lastNo) {\n                                                frm.set_value('reference_no', '');\n                                                frappe.msgprint(__('Cheque Book is over. Create a new Cheque Book.'));\n                                            } else {\n                                                frm.set_value('reference_no', lastAssignedReferenceNo);\n                                                fetchChequeBookInfoAndDuplicateNo(frm);\n                                            }\n                                        } else {\n                                            frm.set_value('reference_no', fromNo);\n                                            lastAssignedReferenceNo = fromNo;\n                                        }\n                                    }\n                                });\n                            }\n                        } \n                        else {\n                            if (!frm.doc.__islocal && frm.doc.doctype === 'Payment Entry' && frm.doc.payment_type === 'Cheque') {\n                                frm.set_value('reference_no', 30);\n                            } else {\n                                lastAssignedReferenceNo = fromNo;\n                                frm.set_value('reference_no', lastAssignedReferenceNo);\n                            }\n                        }\n\n                        console.log('Cheque Book Number Range:');\n                        for (var i = fromNo; i <= lastNo; i++) {\n                            console.log(i);\n                        }\n                    }\n                });\n            }\n        }\n    });\n}\n\n\n\nfunction fetchChequeBookInfoAndDuplicateNo(frm) {\n    var referenceNoToCheck = frm.doc.reference_no;\n\n    var isMatchFound = false;\n\n    frappe.call({\n        method: 'frappe.client.get_list',\n        args: {\n            doctype: 'Payment Entry',\n            fields: ['name', 'reference_no'],\n            order_by: 'creation desc',\n            limit: 0\n        },\n        callback: function(response) {\n            if (response.message && response.message.length > 0) {\n                response.message.forEach(function(paymentEntryInfo) {\n                    console.log(paymentEntryInfo.reference_no);\n                    if (paymentEntryInfo.reference_no === referenceNoToCheck) {\n                        isMatchFound = true;\n                    }\n                });\n\n                if (isMatchFound) {\n                    frappe.msgprint(\"This Cheque/Reference No is one time exists, change Cheque/Reference No value\");\n                    frappe.validated = false;  // Prevent saving the form\n                } else {\n                    console.log(\"This Cheque/Reference No is not exists, continue with saving.\");\n                }\n            }\n        }\n    });\n}\n\n\nfunction fetchChequeBookInfoAndValidateReferenceNo(frm) {\n    var alertShown = false;\n\n    frappe.call({\n        method: 'frappe.client.get_list',\n        args: {\n            doctype: 'Cheque Book',\n            fields: ['from_no', 'last_no'],\n            order_by: 'creation desc',\n            limit: 1\n        },\n        callback: function(response) {\n            if (response.message && response.message.length > 0) {\n                var chequeBook = response.message[0];\n                var fromNo = chequeBook.from_no;\n                var lastNo = chequeBook.last_no;\n\n                var referenceNo = frm.doc.reference_no;\n                var isWithinRange = referenceNo >= fromNo && referenceNo <= lastNo;\n\n                if (!isWithinRange && !alertShown) {\n                    frappe.msgprint({\n                        title: __('Invalid Cheque/Reference No'),\n                        message: __('Reference No must be within the range of Cheque Book. The valid range is from ' + fromNo + ' to ' + lastNo),\n                        indicator: 'red'\n                    });\n\n                    frm.set_value('reference_no', '');\n                    frm.refresh();\n                    frappe.validated = false;\n\n                    alertShown = true;\n                }\n            }\n        }\n    });\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Report",
  "enabled": 1,
  "modified": "2024-01-04 15:19:06.851147",
  "module": "Ambica Finance",
  "name": "Report Export",
  "script": "// frappe.ui.form.on('Report', {\n// \t before_export: function (frm, doctype, name, data) {\n//         // Check if it's an Excel export\n//         if (frappe.flags.in_test) {\n//             // Modify the data to remove the table header\n//             data.splice(0, 1);\n//         }\n//     },\n// })\n\nfrappe.ui.form.on('Report', {\n    refresh: function (frm) {\n        frm.page.add_action_icon('fa fa-download', function() {\n            // Trigger the custom export function\n            customExportCSV(frm);\n        });\n    }\n});\n\nfunction customExportCSV(frm) {\n    // Get the data from the report grid\n    var data = frm.doc.chart.data;\n\n    // Remove the table header\n    data.splice(0, 1);\n\n    // Convert the data to CSV format\n    var csvContent = \"data:text/csv;charset=utf-8,\";\n\n    data.forEach(function(rowArray) {\n        var row = rowArray.join(\",\");\n        csvContent += row + \"\\r\\n\";\n    });\n\n    // Create a link element to trigger the download\n    var encodedUri = encodeURI(csvContent);\n    var link = document.createElement(\"a\");\n    link.setAttribute(\"href\", encodedUri);\n    link.setAttribute(\"download\", \"custom_report.csv\");\n    document.body.appendChild(link);\n\n    // Trigger the download\n    link.click();\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-02-09 11:03:24.736157",
  "module": "Ambica Finance",
  "name": "GST Dialog Box (Transporter)",
  "script": "frappe.ui.form.on('Sales Invoice', {\n     on_submit: function(frm) {\n        frm.add_custom_button('Custom E-Waybill', function() {\n            custom_e_wayBill(frm);\n        });\n    },\n});\nfunction custom_e_wayBill(frm) {\n\n        const api_enabled = india_compliance.is_api_enabled();\n\n        const generate_action = values => {\n            frappe.call({\n                method: \"india_compliance.gst_india.utils.e_waybill.generate_e_waybill\",\n                args: {\n                    doctype: frm.doctype,\n                    docname: frm.doc.name,\n                    values: values,\n                    force: true,\n                },\n                callback: () => {\n                    return frm.refresh();\n                },\n            });\n        };\n\n        const json_action = async values => {\n            const ewb_data = await frappe.xcall(\n                \"india_compliance.gst_india.utils.e_waybill.generate_e_waybill_json\",\n                {\n                    doctype: frm.doctype,\n                    docnames: frm.doc.name,\n                    values,\n                }\n            );\n\n            frm.refresh();\n            india_compliance.trigger_file_download(\n                ewb_data,\n                get_e_waybill_file_name(frm.doc.name)\n            );\n        };\n\n        const d = get_generate_e_waybill_dialog({\n            title: __(\"Generate e-Waybill\"),\n            primary_action_label: \"Generate Eway bill\",\n            primary_action(values) {\n                d.hide(); // Hide the dialog after performing actions\n                if (api_enabled) {\n                    generate_action(values);\n                } else {\n                    json_action(values);\n                }\n            },\n            secondary_action_label: __(\"Download JSON\"),\n            secondary_action: () => {\n                d.hide(); // Hide the dialog after performing actions\n                json_action(d.get_values());\n            },\n        }, frm);\n\n        d.show();\n    }\n\nfunction get_generate_e_waybill_dialog(opts, frm) {\n    if (!frm) frm = { doc: {} };\n    const fields = [\n        {\n            label: \"Part A\",\n            fieldname: \"section_part_a\",\n            fieldtype: \"Section Break\",\n        },\n        {\n            label: \"Transporter\",\n            fieldname: \"transporter\",\n            fieldtype: \"Data\",\n        },\n        {\n            label: \"Distance (in km)\",\n            fieldname: \"distance\",\n            fieldtype: \"Float\",\n            description: \"Set as zero to update distance as per the e-Waybill portal (if available)\",\n        },\n        {\n            fieldtype: \"Column Break\",\n        },\n        {\n            label: \"GST Transporter ID\",\n            fieldname: \"gst_transporter_id\",\n            fieldtype: \"Data\",\n        },\n        {\n            label: \"Part B\",\n            fieldname: \"section_part_b\",\n            fieldtype: \"Section Break\",\n        },\n        {\n            label: \"Vehicle No\",\n            fieldname: \"vehicle_no\",\n            fieldtype: \"Data\",\n        },\n        {\n            label: \"Transport Receipt No\",\n            fieldname: \"lr_no\",\n            fieldtype: \"Data\",\n        },\n        {\n            label: \"Transport Receipt Date\",\n            fieldname: \"lr_date\",\n            fieldtype: \"Date\",\n        },\n        {\n            fieldtype: \"Column Break\",\n        },\n        {\n            label: \"Mode Of Transport\",\n            fieldname: \"mode_of_transport\",\n            fieldtype: \"Select\",\n            options: `\\nRoad\\nAir\\nRail\\nShip`,\n        },\n        {\n            label: \"GST Vehicle Type\",\n            fieldname: \"gst_vehicle_type\",\n            fieldtype: \"Select\",\n            options: `Regular\\nOver Dimensional Cargo (ODC)`,\n        },\n    ];\n\n    opts.fields = fields;\n    const d = new frappe.ui.Dialog(opts);\n\n    return d;\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Payment Entry",
  "enabled": 0,
  "modified": "2024-02-08 17:33:01.681069",
  "module": "Ambica Finance",
  "name": "Remarks Mandatory",
  "script": "frappe.ui.form.on('Payment Entry', {\n    before_save(frm) {\n        console.log(frm.doc.references);\n        console.log(frm.doc.references.length);\n        if (frm.doc.references.length == 0) {\n            console.log(\"Hola amigos\");\n            console.log(frm.doc.remarks,\">>>>>>>>>>>>>>>>>>\")\n            frm.set_value('custom_remarks', 1);\n            frm.set_df('custom_remarks', 1);\n            frm.refresh_field('custom_remarks');\n        }\n        if (frm.doc.references.length != 0) {\n            console.log(\"Hola amigos\");\n            frm.set_value('custom_remarks', 0);\n            frm.set_df('custom_remarks', 0);\n\n            frm.refresh_field('custom_remarks');\n        }\n    }\n});\n",
  "view": "Form"
 }
]